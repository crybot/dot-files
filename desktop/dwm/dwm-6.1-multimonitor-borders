diff --git a/config.def.h b/config.def.h
index fd77a07..9d56727 100644
--- a/config.def.h
+++ b/config.def.h
@@ -1,21 +1,28 @@
 /* See LICENSE file for copyright and license details. */
 
 /* appearance */
-static const unsigned int borderpx  = 1;        /* border pixel of windows */
-static const unsigned int snap      = 32;       /* snap pixel */
+static const unsigned int borderpx  = 3;        /* border pixel of windows */
+static const unsigned int snap      = 0;       /* snap pixel */
 static const int showbar            = 1;        /* 0 means no bar */
 static const int topbar             = 1;        /* 0 means bottom bar */
-static const char *fonts[]          = { "monospace:size=10" };
-static const char dmenufont[]       = "monospace:size=10";
+static const char *fonts[]          = { "monospace:size=13" };
+static const char dmenufont[]       = "monospace:size=13";
+static const char normbordercolor[] = "#444444";
+static const char normbgcolor[]     = "#222222";
+static const char normfgcolor[]     = "#bbbbbb";
+static const char selbordercolor[]  = "#00ffaa";
+static const char selbgcolor[]      = "#005577";
+static const char selfgcolor[]      = "#eeeeee";
 static const char col_gray1[]       = "#222222";
 static const char col_gray2[]       = "#444444";
 static const char col_gray3[]       = "#bbbbbb";
 static const char col_gray4[]       = "#eeeeee";
 static const char col_cyan[]        = "#005577";
+
 static const char *colors[SchemeLast][3]      = {
 	/*               fg         bg         border   */
-	[SchemeNorm] = { col_gray3, col_gray1, col_gray2 },
-	[SchemeSel] =  { col_gray4, col_cyan,  col_cyan  },
+	[SchemeNorm] = { normfgcolor, normbgcolor, normbordercolor },
+	[SchemeSel] =  { selfgcolor, selbgcolor,  selbordercolor  },
 };
 
 /* tagging */
@@ -28,13 +35,12 @@ static const Rule rules[] = {
 	 */
 	/* class      instance    title       tags mask     isfloating   monitor */
 	{ "Gimp",     NULL,       NULL,       0,            1,           -1 },
-	{ "Firefox",  NULL,       NULL,       1 << 8,       0,           -1 },
 };
 
 /* layout(s) */
 static const float mfact     = 0.55; /* factor of master area size [0.05..0.95] */
 static const int nmaster     = 1;    /* number of clients in master area */
-static const int resizehints = 1;    /* 1 means respect size hints in tiled resizals */
+static const int resizehints = 0;    /* 1 means respect size hints in tiled resizals */
 
 static const Layout layouts[] = {
 	/* symbol     arrange function */
@@ -56,8 +62,9 @@ static const Layout layouts[] = {
 
 /* commands */
 static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
-static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", col_gray1, "-nf", col_gray3, "-sb", col_cyan, "-sf", col_gray4, NULL };
-static const char *termcmd[]  = { "st", NULL };
+//static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", col_gray1, "-nf", col_gray3, "-sb", col_cyan, "-sf", col_gray4, NULL };
+static const char *dmenucmd[] = { "dmenu_run", "-fn", dmenufont, "-nb", normbgcolor, "-nf", normfgcolor, "-sb", selbgcolor, "-sf", selfgcolor, NULL };
+static const char *termcmd[]  = { "urxvt", NULL };
 
 static Key keys[] = {
 	/* modifier                     key        function        argument */
diff --git a/config.mk b/config.mk
index 80dc936..81d9a47 100644
--- a/config.mk
+++ b/config.mk
@@ -4,11 +4,11 @@ VERSION = 6.1
 # Customize below to fit your system
 
 # paths
-PREFIX = /usr/local
+PREFIX = /usr
 MANPREFIX = ${PREFIX}/share/man
 
-X11INC = /usr/X11R6/include
-X11LIB = /usr/X11R6/lib
+X11INC = /usr/include/X11
+X11LIB = /usr/lib/X11
 
 # Xinerama, comment if you don't want it
 XINERAMALIBS  = -lXinerama
diff --git a/dwm.c b/dwm.c
index 421bf27..a92d055 100644
--- a/dwm.c
+++ b/dwm.c
@@ -250,7 +250,7 @@ static void (*handler[LASTEvent]) (XEvent *) = {
 	[ConfigureRequest] = configurerequest,
 	[ConfigureNotify] = configurenotify,
 	[DestroyNotify] = destroynotify,
-	[EnterNotify] = enternotify,
+	//[EnterNotify] = enternotify,
 	[Expose] = expose,
 	[FocusIn] = focusin,
 	[KeyPress] = keypress,
@@ -272,6 +272,38 @@ static Window root;
 /* configuration, allows nested code to access above variables */
 #include "config.h"
 
+void change_border(Client *c)
+{
+  // Change a window's border to its neutral color
+	XSetWindowBorder(dpy, c->win, scheme[SchemeNorm][ColBorder].pixel);
+}
+
+// Check if a monitor is in monocle mode
+Bool is_monocle(Monitor* mon)
+{
+  return !strcmp(mon->lt[mon->sellt]->symbol, "[M]");
+}
+
+// Count how many windows there are in the selected tag
+int clients_count(Monitor* mon)
+{
+  Client* c;
+  int count = 0;
+
+  for(c = mon->clients; c; c = c->next)
+    if (ISVISIBLE(c))
+      count++;
+
+  return count;
+}
+
+// Check whether there's a single window on the screen
+// or if the current mode is monocle
+Bool is_fullscreen(Client* c)
+{
+  return c->isfullscreen || clients_count(selmon) == 1;
+}
+
 /* compile-time check if all tags fit into an unsigned int bit array. */
 struct NumTags { char limitexceeded[LENGTH(tags) > 31 ? -1 : 1]; };
 
@@ -381,13 +413,20 @@ applysizehints(Client *c, int *x, int *y, int *w, int *h, int interact)
 void
 arrange(Monitor *m)
 {
+	Client* c ;
 	if (m)
 		showhide(m->stack);
 	else for (m = mons; m; m = m->next)
 		showhide(m->stack);
 	if (m) {
-		arrangemon(m);
-		restack(m);
+	  arrangemon(m);
+	  restack(m);
+
+	  // Check if current selected window has the right border color
+	  c = m->sel;
+	  if(m && c && !is_fullscreen(c) && !is_monocle(m))
+		  XSetWindowBorder(dpy, c->win, scheme[SchemeSel][ColBorder].pixel);
+
 	} else for (m = mons; m; m = m->next)
 		arrangemon(m);
 }
@@ -776,11 +815,11 @@ enternotify(XEvent *e)
 	c = wintoclient(ev->window);
 	m = c ? c->mon : wintomon(ev->window);
 	if (m != selmon) {
-		unfocus(selmon->sel, 1);
-		selmon = m;
+		//unfocus(selmon->sel, 1);
+		//selmon = m;
 	} else if (!c || c == selmon->sel)
 		return;
-	focus(c);
+	//focus(c);
 }
 
 void
@@ -809,7 +848,11 @@ focus(Client *c)
 		detachstack(c);
 		attachstack(c);
 		grabbuttons(c, 1);
-		XSetWindowBorder(dpy, c->win, scheme[SchemeSel][ColBorder].pixel);
+		//Draw window selection only if current mode is not monocle and
+		//selected window is not fullscreen
+		if (!is_fullscreen(c) && !is_monocle(selmon))
+		  XSetWindowBorder(dpy, c->win, scheme[SchemeSel][ColBorder].pixel);
+		
 		setfocus(c);
 	} else {
 		XSetInputFocus(dpy, root, RevertToPointerRoot, CurrentTime);
@@ -865,8 +908,10 @@ focusstack(const Arg *arg)
 					c = i;
 	}
 	if (c) {
-		focus(c);
-		restack(selmon);
+	  focus(c);
+	  restack(selmon);
+	  if (is_monocle(selmon) || is_fullscreen(c))
+	    change_border(c);
 	}
 }
 
@@ -1129,7 +1174,12 @@ monocle(Monitor *m)
 	if (n > 0) /* override layout symbol */
 		snprintf(m->ltsymbol, sizeof m->ltsymbol, "[%d]", n);
 	for (c = nexttiled(m->clients); c; c = nexttiled(c->next))
-		resize(c, m->wx, m->wy, m->ww - 2 * c->bw, m->wh - 2 * c->bw, 0);
+	{
+	  // Do not use colored border while in monocle-mode
+//	  XSetWindowBorder(dpy, c->win, scheme[SchemeNorm].border->pix);
+	  resize(c, m->wx, m->wy, m->ww - 2 * c->bw, m->wh - 2 * c->bw, 0);
+	}
+
 }
 
 void
@@ -1364,6 +1414,8 @@ resizemouse(const Arg *arg)
 	}
 }
 
+
+
 void
 restack(Monitor *m)
 {
@@ -1381,10 +1433,16 @@ restack(Monitor *m)
 		wc.sibling = m->barwin;
 		for (c = m->stack; c; c = c->snext)
 			if (!c->isfloating && ISVISIBLE(c)) {
-				XConfigureWindow(dpy, c->win, CWSibling|CWStackMode, &wc);
-				wc.sibling = c->win;
+			  
+			  // IF MONOCLE-MODE OR THERE'S ONLY ONE WINDOW ON THE SCREEN SET NORMAL BORDER
+			  if (is_fullscreen(c) || is_monocle(selmon))
+			      change_border(c);
+			  
+			  XConfigureWindow(dpy, c->win, CWSibling|CWStackMode, &wc);
+			  wc.sibling = c->win;
 			}
 	}
+
 	XSync(dpy, False);
 	while (XCheckMaskEvent(dpy, EnterWindowMask, &ev));
 }
@@ -1529,6 +1587,7 @@ setlayout(const Arg *arg)
 		arrange(selmon);
 	else
 		drawbar(selmon);
+
 }
 
 /* arg > 1.0 will set mfact absolutly */
